{% extends 'base.html.twig' %}

{% block title %}Nuevo Comercio{% endblock %}

{% block body %}
    <div class="mt-5"></div>
    <div class="features-section crearComercio container">
        <h1 class="h3 mb-3 font-weight-normal">Crear Comercio</h1>

        {{ form_start(form, {'attr': {'id': 'formId'}}) }}

        <div class="sirulo" id="sirulo"></div>

        <div id="paso1" class="paso-formulario">
            <!-- Name input -->
            <div class="form-outline mb-4">
                <input name="{{ field_name(form.nombre) }}" type="text" id="form1" class="form-control" required/>
                <label class="form-label" for="form1">{{ field_label(form.nombre) }}</label>
            </div>
            <div class="error-message"></div>
        </div>
        <!-- Email input -->
        <div id="paso2" class="paso-formulario" style="display: none;">
            <div class="form-outline mb-4">
                <input name="{{ field_name(form.email) }}" type="email" id="form2" class="form-control"
                       onkeyup="validateEmail(this)" required/>
                <label class="form-label" for="form2">{{ field_label(form.email) }}</label>
            </div>
            <div class="error-message"></div>
        </div>
        <!-- Telefono input -->
        <div id="paso3" class="paso-formulario" style="display: none;">
            <div class="form-outline mb-4">
                <input name="{{ field_name(form.telefono) }}" type="tel" id="form3" class="form-control"
                       onkeyup="validatePhoneNumber(this)" required/>
                <label class="form-label" for="form3">{{ field_label(form.telefono) }}</label>
            </div>
            <div class="error-message"></div>
        </div>
        <!-- Direccion input -->
        <div id="paso4" class="paso-formulario" style="display: none;">
            <div class="form-outline mb-4">
                <input name="{{ field_name(form.direccion) }}" type="text" id="form4" class="form-control"
                       onchange="mapa()" required/>
                <label class="form-label" for="form4">{{ field_label(form.direccion) }}</label>
            </div>
            <div class="error-message"></div>
            <section>
                <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCXfC6YS6x486gAff9-InexBfZaerhr9p4"></script>
                <div id="map" style="width: 100%; height: 150px;"></div>
            </section>
        </div>
        <!-- Descripcion input -->
        <div id="paso5" class="paso-formulario" style="display: none;">
            <div class="form-outline mb-4">
            <textarea name="{{ field_name(form.descripcion) }}" class="form-control" id="form5"
                      rows="4" required></textarea>
                <label class="form-label" for="form5">{{ field_label(form.descripcion) }}</label>
            </div>
            <div class="error-message"></div>

        </div>
        <!-- Foto input -->
        <div id="paso6" class="paso-formulario" style="display: none;">
            <div class="form-group mb-4">
                <label for="inputFoto" class="form-label">{{ field_label(form.foto) }}</label>
                <input class="form-control" type="file" id="inputFoto" name="{{ field_name(form.foto) }}"
                       accept="image/*" onchange="validateImage(this)" required>
            </div>
            <div class="error-message"></div>
        </div>

        <!-- Categoria input -->
        <div id="paso7" class="paso-formulario" style="display: none;">
            <label>{{ field_label(form.categorias) }}</label>
            <div class="row">
                {% for categoria in categorias %}
                    <div class="form-check form-group mb-4 col-4">
                        <input class="form-check-input" type="radio" value="{{ categoria.id }}"
                               name="{{ field_name(form.categorias) }}" id="categoria{{ categoria.id }}">
                        <label class="form-check-label text-capitalize" for="categoria{{ categoria.id }}">
                            {{ categoria.nombre }}
                        </label>
                    </div>
                {% endfor %}
                <div class="error-message"></div>
            </div>
        </div>

        <div id="paso8" class="paso-formulario" style="display: none;">

        </div>

        <!-- Barra de progreso -->
        <div class="progress mb-4">
            <div id="progressBar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0"
                 aria-valuemin="0" aria-valuemax="100"></div>
        </div>

        <!-- Botones de navegación -->
        <button type="button" class="btn btn-primary btn-floating prevBtn" id="prevBtn" onclick="nextPrev(-1)">
            <i class="fa-solid fa-chevron-left"></i>
        </button>
        <button type="button" class="btn btn-primary btn-floating nextBtn" id="nextBtn" onclick="nextPrev(1)">
            <i class="fa-solid fa-chevron-right"></i>
        </button>

        <!-- Botón de envío -->
        <br>
        <button class="btn btn-lg btn-primary btn-floating submitBtn" id="submitBtn" type="button" onclick="submitForm()"><i class="fa-regular fa-floppy-disk"></i></button>

        {{ form_end(form) }}

    </div>

    <a href="{{ path('admin_comercios') }}">back to list</a>

    {% block footer %}{% endblock %}

{% endblock %}
{% block js %}
{#    <script>#}
{#        ClassicEditor#}
{#            .create( document.querySelector( '#form5' ) )#}
{#            .catch( error => {#}
{#                console.error( error );#}
{#            } )#}
{#            .then( form5 => {#}
{#                window.form5 = form5; // Almacena la instancia del editor en una variable global#}
{#            });#}
{#    </script>#}
    <script>
        var mapaOk = false;     // Validar dirección
        var imgOk = false;      // Validar imagen
        var catOk = false;      // Validar categoría
        var formSubmitted = false; // Validar que el formulario solo se envie una vez
        var currentStep = 0;    // Función para los pasos del formulario

        showStep(currentStep);

        function showStep(n) {
            var steps = document.getElementsByClassName("paso-formulario");
            for (var i = 0; i < steps.length; i++) {
                steps[i].style.display = "none";
            }
            steps[n].style.display = "block";
            updateProgressBar(n);
            updateButtonsVisibility(n);
        }

        function nextPrev(n) {
            // Validar campos antes de avanzar
            console.log('validateForm: ' ,validateForm());
            if (n === 1 && !validateForm()) {
                // La validación falló, no avanzar
                return false;
            }
            // Avanzar al siguiente paso
            currentStep += n;
            showStep(currentStep);
            document.getElementById("sirulo").classList.remove("sirulo-profe");
        }

        function updateProgressBar(n) {
            var progress = ((n + 1) / document.getElementsByClassName("paso-formulario").length) * 100;
            document.getElementById("progressBar").style.width = progress + "%";
            document.getElementById("progressBar").setAttribute("aria-valuenow", progress);
        }

        function updateButtonsVisibility(n) {
            var prevBtn = document.getElementById("prevBtn");
            var nextBtn = document.getElementById("nextBtn");
            var submitBtn = document.getElementById("submitBtn");

            // Ocultar o mostrar el botón "Atrás" según el paso actual
            prevBtn.style.display = (n === 0) ? "none" : "inline";

            // Ocultar o mostrar el botón "Siguiente" y el botón de envío según el paso actual
            nextBtn.style.display = (n < document.getElementsByClassName("paso-formulario").length - 1) ? "inline" : "none";
            submitBtn.style.display = (n === document.getElementsByClassName("paso-formulario").length - 1) ? "inline" : "none";
        }

        function validateForm() {
            // Obtener los campos del paso actual
            var currentStepFields = document.querySelectorAll('.paso-formulario')[currentStep].querySelectorAll('input, select, textarea, text');

            // Realizar la validación para cada campo
            for (var i = 0; i < currentStepFields.length; i++) {
                // Validación genérica para campos obligatorios usando HTML5 required
                if (currentStepFields[i].hasAttribute('required') && currentStepFields[i].value.trim() === '') {

                    // if(window.form5.getData().trim() != ''){
                    //     return true;
                    // }
                    // Mostrar mensaje de error debajo del campo
                    showError(currentStepFields[i], 'Por favor, complete este campo.');
                    return false;
                }
                if (currentStepFields[i].type === 'email'){
                    console.log('ifEmail: ', currentStepFields[i]);
                }
                // Validación específica para el campo de correo electrónico
                if (currentStepFields[i].type === 'email' && !validateEmail(currentStepFields[i])) {
                    showError(currentStepFields[i], 'Por favor, ingrese un correo electrónico válido.');
                    return false;
                }

                // Validación específica para el campo de teléfono
                if (currentStepFields[i].type === 'tel' && !validatePhoneNumber(currentStepFields[i])) {
                    showError(currentStepFields[i], 'Por favor, ingrese un número de teléfono válido (9 dígitos).');
                    return false;
                }

                // Validación específica para el campo de dirección
                if (currentStepFields[i].id === 'form4' && mapaOk === false) {
                    showError(currentStepFields[i], 'Por favor, ingrese una dirección válida.');
                    return false;
                }

                // Validación específica para el campo de imagen
                if (currentStepFields[i].id === 'inputFoto' && imgOk === false) {
                    showError(currentStepFields[i], 'Por favor, ingrese una imagen válida.');
                    return false;
                }

                // Validación específica para el campo de categoria
                if (currentStepFields[i].id === 'categoria1' && !validateCategory()){
                    showError(currentStepFields[i], 'Por favor, seleccione una categoria.');
                    return false;
                }
            }
            // Si la validación pasa, ocultar los mensajes de error
            hideAllErrors();
            return true;
        }

        function validateEmail(email) {
            // Utiliza una expresión regular simple para validar el formato del correo electrónico
            var emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

            if(!emailRegex.test(email.value)){
                showError(email, 'El email debe tener un formato válido.');
                return false;
            }

            hideError(email);
            return true;
        }

        function validatePhoneNumber(phoneNumber) {
            // Utiliza una expresión regular para validar que el número de teléfono tenga exactamente 6 dígitos
            var phoneRegex = /^\d{9}$/;

            if(!phoneRegex.exec(phoneNumber.value)){
                showError(phoneNumber, 'El número debe tener 9 digitos.');
                return false;
            }
            hideError(phoneNumber);
            return true;
        }

        function validateImage(fileInput) {
            imgOk = true;
            var allowedExtensions = /(\.jpg|\.jpeg|\.png|\.gif)$/i; // Extensiones permitidas
            var maxFileSizeInMB = 5; // Tamaño máximo permitido en megabytes

            var filePath = fileInput.value;
            var fileSize = fileInput.files[0].size;

            // Verificar la extensión del archivo
            if (!allowedExtensions.exec(filePath)) {
                imgOk = false;
                showError(fileInput, 'Por favor, seleccione un archivo de imagen válido (JPEG, JPG, PNG o GIF).');
                return false;
            }

            // Verificar el tamaño del archivo
            if (fileSize > maxFileSizeInMB * 1024 * 1024) {
                imgOk = false;
                showError(fileInput, 'La imagen seleccionada es demasiado grande. El tamaño máximo permitido es de ' + maxFileSizeInMB + ' MB.');
                return false;
            }

            // Si todo está bien, oculta los mensajes de error
            hideError(fileInput);
            return true;
        }

        function validateCategory() {
            catOk = true;
            var selectedCategory = document.getElementsByName('comercio_new_form[categorias][]');
            var seleccionado = Array.from(selectedCategory).some(radio => radio.checked);

            if (!seleccionado) {
                catOk = false;
                showError(document.getElementById("paso7"), 'Por favor, seleccione una categoría.');
                return false;
            }

            // Si la categoría está seleccionada, oculta el mensaje de error y establece el valor del campo oculto
            hideError(document.getElementById("paso7"));
            return true;
        }

        function submitForm() {
            // Si el formulario ya se ha enviado, no hacer nada
            if (formSubmitted) {
                return;
            }

            // Si el paso actual es el último, valida la categoría antes de enviar el formulario
            if (currentStep === document.getElementsByClassName("paso-formulario").length - 1) {
                if (!validateCategory()) {
                    return;
                }
            }
            // Deshabilita el botón de envío para evitar envíos múltiples
            document.getElementById("submitBtn").disabled = true;

            formSubmitted = true;

            // Envía el formulario
            document.getElementById("formId").submit();
        }

        function showError(field, message) {
            // Encuentra el elemento de mensaje de error asociado con el campo
            var errorElement = field.parentElement.parentElement.querySelector('.error-message');
            document.getElementById("sirulo").classList.add("sirulo-profe");

            // Muestra el mensaje de error y aplica el estilo
            errorElement.textContent = message;
            errorElement.style.color = 'red';
        }
        function hideError(field) {
            // Encuentra el elemento de mensaje de error asociado con el campo y limpia el mensaje
            var errorElement = field.parentElement.parentElement.querySelector('.error-message');
            document.getElementById("sirulo").classList.remove("sirulo-profe");
            errorElement.textContent = '';
        }

        function hideAllErrors() {
            // Oculta todos los mensajes de error en el formulario
            var errorElements = document.querySelectorAll('.error-message');
            document.getElementById("sirulo").classList.remove("sirulo-profe");
            errorElements.forEach(function (element) {
                element.textContent = '';
            });
        }

        // Función para inicializar el mapa
        function initMap() {
            var direccion = "Plaza de España, Zaragoza";

            var geocoder = new google.maps.Geocoder();

            geocoder.geocode({'address': direccion}, function (results, status) {
                if (status === 'OK') {
                    var mapOptions = {
                        center: results[0].geometry.location,
                        zoom: 15
                    };

                    var map = new google.maps.Map(document.getElementById('map'), mapOptions);

                    var marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location,
                        title: 'Ubicación del Comercio'
                    });
                } else {
                    alert('Geocodificación fallida debido a: ' + status);
                }
            });
        }

        function mapa() {
            var direccion = document.getElementById('form4').value;

            var geocoder = new google.maps.Geocoder();

            geocoder.geocode({'address': direccion}, function (results, status) {
                if (status === 'OK') {
                    var mapOptions = {
                        center: results[0].geometry.location,
                        zoom: 15
                    };

                    var map = new google.maps.Map(document.getElementById('map'), mapOptions);

                    var marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location,
                        title: 'Ubicación del Comercio'
                    });
                    hideAllErrors();
                    mapaOk = true;
                } else if (status === 'ZERO_RESULTS') {
                    mapaOk = false;
                    // alert('La dirección proporcionada no es válida. Por favor, ingrese una dirección válida.');
                } else {
                    mapaOk = false;
                    // alert('Geocodificación fallida debido a: ' + status);
                }
            });
        }
    </script>

    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCXfC6YS6x486gAff9-InexBfZaerhr9p4&callback=initMap">
    </script>
{% endblock %}